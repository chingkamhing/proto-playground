// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tm2_proto_tmdatabase

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// get user basic information
	GetUserBasic(ctx context.Context, in *GetUserBasicRequest, opts ...grpc.CallOption) (*GetUserBasicReply, error)
	// get user balance
	GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceReply, error)
	// get user start game info
	GetUserStartGameInfo(ctx context.Context, in *GetUserStartGameInfoRequest, opts ...grpc.CallOption) (*GetUserStartGameInfoReply, error)
	// create bot players
	CreateBotPlayers(ctx context.Context, in *CreateBotPlayersRequest, opts ...grpc.CallOption) (*CreateBotPlayersReply, error)
	// get bot players
	ListBotPlayers(ctx context.Context, in *ListBotPlayersRequest, opts ...grpc.CallOption) (*ListBotPlayersReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUserBasic(ctx context.Context, in *GetUserBasicRequest, opts ...grpc.CallOption) (*GetUserBasicReply, error) {
	out := new(GetUserBasicReply)
	err := c.cc.Invoke(ctx, "/tmdatabase.User/GetUserBasic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceReply, error) {
	out := new(GetUserBalanceReply)
	err := c.cc.Invoke(ctx, "/tmdatabase.User/GetUserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserStartGameInfo(ctx context.Context, in *GetUserStartGameInfoRequest, opts ...grpc.CallOption) (*GetUserStartGameInfoReply, error) {
	out := new(GetUserStartGameInfoReply)
	err := c.cc.Invoke(ctx, "/tmdatabase.User/GetUserStartGameInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateBotPlayers(ctx context.Context, in *CreateBotPlayersRequest, opts ...grpc.CallOption) (*CreateBotPlayersReply, error) {
	out := new(CreateBotPlayersReply)
	err := c.cc.Invoke(ctx, "/tmdatabase.User/CreateBotPlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListBotPlayers(ctx context.Context, in *ListBotPlayersRequest, opts ...grpc.CallOption) (*ListBotPlayersReply, error) {
	out := new(ListBotPlayersReply)
	err := c.cc.Invoke(ctx, "/tmdatabase.User/ListBotPlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// get user basic information
	GetUserBasic(context.Context, *GetUserBasicRequest) (*GetUserBasicReply, error)
	// get user balance
	GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceReply, error)
	// get user start game info
	GetUserStartGameInfo(context.Context, *GetUserStartGameInfoRequest) (*GetUserStartGameInfoReply, error)
	// create bot players
	CreateBotPlayers(context.Context, *CreateBotPlayersRequest) (*CreateBotPlayersReply, error)
	// get bot players
	ListBotPlayers(context.Context, *ListBotPlayersRequest) (*ListBotPlayersReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetUserBasic(context.Context, *GetUserBasicRequest) (*GetUserBasicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBasic not implemented")
}
func (UnimplementedUserServer) GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedUserServer) GetUserStartGameInfo(context.Context, *GetUserStartGameInfoRequest) (*GetUserStartGameInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStartGameInfo not implemented")
}
func (UnimplementedUserServer) CreateBotPlayers(context.Context, *CreateBotPlayersRequest) (*CreateBotPlayersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBotPlayers not implemented")
}
func (UnimplementedUserServer) ListBotPlayers(context.Context, *ListBotPlayersRequest) (*ListBotPlayersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBotPlayers not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUserBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmdatabase.User/GetUserBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserBasic(ctx, req.(*GetUserBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmdatabase.User/GetUserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserBalance(ctx, req.(*GetUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserStartGameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStartGameInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserStartGameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmdatabase.User/GetUserStartGameInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserStartGameInfo(ctx, req.(*GetUserStartGameInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateBotPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBotPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateBotPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmdatabase.User/CreateBotPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateBotPlayers(ctx, req.(*CreateBotPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListBotPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBotPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListBotPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmdatabase.User/ListBotPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListBotPlayers(ctx, req.(*ListBotPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tmdatabase.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserBasic",
			Handler:    _User_GetUserBasic_Handler,
		},
		{
			MethodName: "GetUserBalance",
			Handler:    _User_GetUserBalance_Handler,
		},
		{
			MethodName: "GetUserStartGameInfo",
			Handler:    _User_GetUserStartGameInfo_Handler,
		},
		{
			MethodName: "CreateBotPlayers",
			Handler:    _User_CreateBotPlayers_Handler,
		},
		{
			MethodName: "ListBotPlayers",
			Handler:    _User_ListBotPlayers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tmdatabase/tmdatabase_service.proto",
}

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	// create new game
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameReply, error)
	// list all games' info
	ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesReply, error)
	// get game info by game ID
	GetGameByID(ctx context.Context, in *GetGameByIDRequest, opts ...grpc.CallOption) (*GetGameByIDReply, error)
	// get game info by game name
	GetGameByName(ctx context.Context, in *GetGameByNameRequest, opts ...grpc.CallOption) (*GetGameByNameReply, error)
	// update game info
	UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*UpdateGameReply, error)
	// delete game info
	DeleteGame(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*DeleteGameReply, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameReply, error) {
	out := new(CreateGameReply)
	err := c.cc.Invoke(ctx, "/tmdatabase.Game/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesReply, error) {
	out := new(ListGamesReply)
	err := c.cc.Invoke(ctx, "/tmdatabase.Game/ListGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetGameByID(ctx context.Context, in *GetGameByIDRequest, opts ...grpc.CallOption) (*GetGameByIDReply, error) {
	out := new(GetGameByIDReply)
	err := c.cc.Invoke(ctx, "/tmdatabase.Game/GetGameByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetGameByName(ctx context.Context, in *GetGameByNameRequest, opts ...grpc.CallOption) (*GetGameByNameReply, error) {
	out := new(GetGameByNameReply)
	err := c.cc.Invoke(ctx, "/tmdatabase.Game/GetGameByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*UpdateGameReply, error) {
	out := new(UpdateGameReply)
	err := c.cc.Invoke(ctx, "/tmdatabase.Game/UpdateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) DeleteGame(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*DeleteGameReply, error) {
	out := new(DeleteGameReply)
	err := c.cc.Invoke(ctx, "/tmdatabase.Game/DeleteGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	// create new game
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameReply, error)
	// list all games' info
	ListGames(context.Context, *ListGamesRequest) (*ListGamesReply, error)
	// get game info by game ID
	GetGameByID(context.Context, *GetGameByIDRequest) (*GetGameByIDReply, error)
	// get game info by game name
	GetGameByName(context.Context, *GetGameByNameRequest) (*GetGameByNameReply, error)
	// update game info
	UpdateGame(context.Context, *UpdateGameRequest) (*UpdateGameReply, error)
	// delete game info
	DeleteGame(context.Context, *DeleteGameRequest) (*DeleteGameReply, error)
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedGameServer) ListGames(context.Context, *ListGamesRequest) (*ListGamesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (UnimplementedGameServer) GetGameByID(context.Context, *GetGameByIDRequest) (*GetGameByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameByID not implemented")
}
func (UnimplementedGameServer) GetGameByName(context.Context, *GetGameByNameRequest) (*GetGameByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameByName not implemented")
}
func (UnimplementedGameServer) UpdateGame(context.Context, *UpdateGameRequest) (*UpdateGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGame not implemented")
}
func (UnimplementedGameServer) DeleteGame(context.Context, *DeleteGameRequest) (*DeleteGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGame not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmdatabase.Game/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmdatabase.Game/ListGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ListGames(ctx, req.(*ListGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetGameByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetGameByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmdatabase.Game/GetGameByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetGameByID(ctx, req.(*GetGameByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetGameByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetGameByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmdatabase.Game/GetGameByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetGameByName(ctx, req.(*GetGameByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_UpdateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).UpdateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmdatabase.Game/UpdateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).UpdateGame(ctx, req.(*UpdateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_DeleteGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).DeleteGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmdatabase.Game/DeleteGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).DeleteGame(ctx, req.(*DeleteGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tmdatabase.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _Game_CreateGame_Handler,
		},
		{
			MethodName: "ListGames",
			Handler:    _Game_ListGames_Handler,
		},
		{
			MethodName: "GetGameByID",
			Handler:    _Game_GetGameByID_Handler,
		},
		{
			MethodName: "GetGameByName",
			Handler:    _Game_GetGameByName_Handler,
		},
		{
			MethodName: "UpdateGame",
			Handler:    _Game_UpdateGame_Handler,
		},
		{
			MethodName: "DeleteGame",
			Handler:    _Game_DeleteGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tmdatabase/tmdatabase_service.proto",
}
